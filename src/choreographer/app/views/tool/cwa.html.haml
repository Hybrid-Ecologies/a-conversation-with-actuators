:coffeescript
  ports = #{@ports.to_json.html_safe}
  files = #{@files.to_json.html_safe}
  window.sens = #{@metadata.to_json.html_safe}
  _.extend window, window.sens.actuators

  PROJECT = CANVAS_COLOR: 'rgb(245, 244, 240)'
  
  window.am = null;
  window.vm = null;
  window.theatre = null;
  window.sc = null

  $('#shade').hide()
  $('body').loading
    theme: 'dark'

  window.timeoutManager = []


  $ ->
    $('#main-alert').hide()
    $('body').loading 'stop'
    window.ws = new WebStorage
    dom = 'projectviewer canvas'
    # FILE MANAGER
    window.fs = new ProjectFileManager
      paper: Utility.paperSetup(dom)
      files: files
      selector: $('#file-selector')
      onLoad: (data) ->
        $(dom).css 'background', PROJECT.CANVAS_COLOR
        AestheticActuation.enable paper
        window.theatre = main_paper.project
        paper.view.update();
        window.theatre = theatre
        setupTheatre(theatre);
        setupSockets()
        bindHandlers()
        return
    
    # SOCKET CONTROL
    window.sc = new SocketControl
      socket_port: 3015
      ports: ports
      trigger: $('#port-connect')
      selector: $('#port-selector')
      status: $('#port-status')
    
  window.setupSockets = ()->
    sc.subscribe 'input', (command)->
      switch command.flag
        when "D" # DOCK CHANGE
          c = command.args[3]
          while c.length < 6
            c = "0" + c
          theatre.updateDock(command.args[0], command.args[2], "#" + c)
        when "A"
          theatre.updateStage(command.args[0], command.args[1] == "UP")

  window.bindHandlers = ()->
    $('.theatre-mode').on 'theatre_change', (e, state)->
      if state == parseInt($(this).attr('name'))
        $(this).click()

    $('.theatre-mode').click ()->
      state = parseInt($(this).attr('name'))
      $(this).addClass('active').siblings().removeClass('active')
      switch state
        when PLAY_ONCE
          alertify.notify("<b> TAP TO SEND </b> <br>Touch stages to play signal once")
        when PLAY_REPEAT
          alertify.notify("<b> PLAY/PAUSE </b> <br>Touch stages to play signal. Touch again to stop repeating.")
        when HOLD_PLAY
          alertify.notify("<b> HOLD TO PLAY </b> <br>Hold stages to play signal.")
        when DEMO
          alertify.notify("<b> TOUCH ON/ RELEASE OFF </b> <br>Touch to play a high signal.")
      theatre.state = state

    $('#nuke').click ()->  
      theatre.stopDocks()
      theatre.clearDocks()

      # STOP COMMUNICATION
      id = sc.sendMessage {flag: 'q', args: []},
        delay: 0
        live: true
        update: false
    
      alertify.error("<b>Emergency stop initiated.</b> <br>Cleared "+window.timeoutManager.length+" messages.");
  
#main-alert.alert.alert-warning
  %strong HEY!
  %span LETS START DESIGNING!
#ui2
  = render :partial => "tool/levels/file_selectors"
  #control-column
    = render :partial => "tool/levels/project"  
  %group.vert#levels
    
    = render :partial => "tool/levels/datasignals"
    
:css
  #ui2{
    height: 100%;
    overflow-y: scroll;
  }
  .ui{
  	height: 100%;
  }
  .blue{
    background: blue;
  }



 
